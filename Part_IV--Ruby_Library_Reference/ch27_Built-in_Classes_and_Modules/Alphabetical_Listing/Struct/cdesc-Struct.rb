=beginStruct < Objecthttp://ruby-doc.org/core-1.9.3/Struct.html------------------------------------------------------------------------------Includes:Enumerable (from ~/.rdoc)(from ~/.rdoc)------------------------------------------------------------------------------A Struct is a convenient way to bundle a number of attributes together,using accessor methods, without having to write an explicit class.The Struct class is a generator of specific classes,each one of which is defined to hold a set of variables and their accessors. In these examples, we'll call the generated class``CustomerClass'' and we'll show anexample instance of that class as ``CustomerInst.''In the descriptions that follow, the parameter symbol refers to asymbol, which is either a quoted string or a Symbol (such as:name).Struct serialization/deserialization------------------------------------------------------------------------------Public Class methods:  new( [aString] [, aSym]+> )  StructClass  new(arg, ...)                obj  StructClass[arg, ...]        obj    Creates a new class, named by a String, containing accessor methods for the given symbols.   If the name a String is omitted, an anonymous structure class will be created.   Otherwise, the name of this struct will appear as a constant in class Struct,   so it must be unique for all Structs in the system and should start with a capital letter.   Assigning a structure class to a constant effectively gives the class the name of the constant.  Struct::new returns a new Class object, which can then be used to create specific instances of the new structure.   The number of actual parameters must be less than or equal to the number of attributes defined for this class;   unset parameters default to nil. Passing too many parameters will raise an ArgumentError.  The remaining methods listed in this section (class and instance) are defined for this generated class.    # Create a structure with a name in Struct  Struct.new("Customer", :name, :address)      #=> Struct::Customer    Struct::Customer.new("Dave", "123 Main")     #=> #<struct Struct::Customer name="Dave", address="123 Main">  # Create a structure named by its constant  Customer = Struct.new(:name, :address)       #=> Customer    Customer.new("Dave", "123 Main")             #=> #<struct Customer name="Dave", address="123 Main">Instance methods:  ==, [], []=, as_json, each, each_pair,  eql?, hash, inspect, length, members,  pretty_print, pretty_print_cycle,  select, size, to_a, to_json, to_s,  values, values_at  =end